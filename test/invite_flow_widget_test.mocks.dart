// Mocks generated by Mockito 5.4.4 from annotations
// in habit_level_up/test/invite_flow_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:habit_level_up/core/auth/auth_service.dart' as _i2;
import 'package:habit_level_up/core/validation/validation_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResult_0 extends _i1.SmartFake implements _i2.AuthResult {
  _FakeAuthResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValidationResult_1 extends _i1.SmartFake
    implements _i3.ValidationResult {
  _FakeValidationResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<String?> getCurrentUserIdAsync() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserIdAsync,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getStoredUsername() => (super.noSuchMethod(
        Invocation.method(
          #getStoredUsername,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String> getCurrentUserDisplayName() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserDisplayName,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentUserDisplayName,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<bool> hasSelectedUsername() => (super.noSuchMethod(
        Invocation.method(
          #hasSelectedUsername,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.AuthResult> signUp(
    String? email,
    String? password,
    String? displayName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            displayName,
          ],
        ),
        returnValue: _i4.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #signUp,
            [
              email,
              password,
              displayName,
            ],
          ),
        )),
      ) as _i4.Future<_i2.AuthResult>);

  @override
  _i4.Future<_i2.AuthResult> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #signIn,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.AuthResult>);

  @override
  _i4.Future<_i2.AuthResult> resetPassword(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i4.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #resetPassword,
            [email],
          ),
        )),
      ) as _i4.Future<_i2.AuthResult>);

  @override
  _i4.Future<_i2.AuthResult> resendVerification(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #resendVerification,
          [email],
        ),
        returnValue: _i4.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #resendVerification,
            [email],
          ),
        )),
      ) as _i4.Future<_i2.AuthResult>);
}

/// A class which mocks [ValidationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidationService extends _i1.Mock implements _i3.ValidationService {
  MockValidationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ValidationResult validateUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateUsername,
          [username],
        ),
        returnValue: _FakeValidationResult_1(
          this,
          Invocation.method(
            #validateUsername,
            [username],
          ),
        ),
      ) as _i3.ValidationResult);

  @override
  _i3.ValidationResult validateHabitName(String? habitName) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateHabitName,
          [habitName],
        ),
        returnValue: _FakeValidationResult_1(
          this,
          Invocation.method(
            #validateHabitName,
            [habitName],
          ),
        ),
      ) as _i3.ValidationResult);

  @override
  void guardAgainstSelfPartnership(
    String? userId,
    String? partnerId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #guardAgainstSelfPartnership,
          [
            userId,
            partnerId,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void guardUsernameExists(String? username) => super.noSuchMethod(
        Invocation.method(
          #guardUsernameExists,
          [username],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String sanitizeUserText(String? input) => (super.noSuchMethod(
        Invocation.method(
          #sanitizeUserText,
          [input],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #sanitizeUserText,
            [input],
          ),
        ),
      ) as String);

  @override
  bool canPerformWrite() => (super.noSuchMethod(
        Invocation.method(
          #canPerformWrite,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.ValidationResult checkUsernameDuplicate(
    String? username,
    List<String>? existingUsernames,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUsernameDuplicate,
          [
            username,
            existingUsernames,
          ],
        ),
        returnValue: _FakeValidationResult_1(
          this,
          Invocation.method(
            #checkUsernameDuplicate,
            [
              username,
              existingUsernames,
            ],
          ),
        ),
      ) as _i3.ValidationResult);
}
