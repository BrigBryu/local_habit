import 'package:isar/isar.dart';

/// Adds `findFirst()` / `findAll()` to Isar queries if the generated
/// extensions are missing (workaround for Isar 3.1.0+1 bug).
/// 
/// This extension provides missing query execution methods that should
/// be generated by the Isar code generator but are not available in
/// the current version.
extension SafeQueryHelperAfterFilter<T> on QueryBuilder<T, T, QAfterFilterCondition> {
  /// Executes query and returns the first result or null
  Future<T?> findFirstSafe() async {
    final results = await findAllSafe();
    return results.isEmpty ? null : results.first;
  }

  /// Executes query and returns all results
  Future<List<T>> findAllSafe() async {
    try {
      // Build and execute the query
      final query = build();
      final result = await query.findAll();
      return result;
    } catch (e) {
      // If build fails, return empty list
      return <T>[];
    }
  }
}

/// Extension for sortBy query builders
extension SafeQueryHelperAfterSort<T> on QueryBuilder<T, T, QAfterSortBy> {
  /// Executes query and returns the first result or null
  Future<T?> findFirstSafe() async {
    final results = await findAllSafe();
    return results.isEmpty ? null : results.first;
  }

  /// Executes query and returns all results
  Future<List<T>> findAllSafe() async {
    try {
      final query = build();
      final result = await query.findAll();
      return result;
    } catch (e) {
      return <T>[];
    }
  }

  /// Returns count of matching records
  Future<int> countSafe() async {
    try {
      final query = build();
      final result = await query.count();
      return result;
    } catch (e) {
      return 0;
    }
  }
}

/// Extension for where query builders
extension SafeQueryHelperAfterWhere<T> on QueryBuilder<T, T, QAfterWhereClause> {
  /// Executes query and returns the first result or null
  Future<T?> findFirstSafe() async {
    final results = await findAllSafe();
    return results.isEmpty ? null : results.first;
  }

  /// Executes query and returns all results
  Future<List<T>> findAllSafe() async {
    try {
      final query = build();
      final result = await query.findAll();
      return result;
    } catch (e) {
      return <T>[];
    }
  }

  /// Returns count of matching records
  Future<int> countSafe() async {
    try {
      final query = build();
      final result = await query.count();
      return result;
    } catch (e) {
      return 0;
    }
  }
}

/// Extension for base query builders
extension SafeQueryHelperBase<T> on QueryBuilder<T, T, QWhere> {
  /// Executes query and returns the first result or null
  Future<T?> findFirstSafe() async {
    final results = await findAllSafe();
    return results.isEmpty ? null : results.first;
  }

  /// Executes query and returns all results
  Future<List<T>> findAllSafe() async {
    try {
      final query = build();
      final result = await query.findAll();
      return result;
    } catch (e) {
      return <T>[];
    }
  }
}